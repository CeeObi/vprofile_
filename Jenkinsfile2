// Remember to change the name of this file to Jenkinsfile, if running from the root directory instead

def COLOR_MAP=['SUCCESS': 'good', 'FAILURE':'danger']

pipeline {
    
	agent any

	tools {
        maven "MAVEN3.9"
        jdk 'JDK17'
    }

    
	
    stages{
        stage('FETCH CODE'){
            steps {
                git branch: 'atom', url: 'https://github.com/hkhcoder/vprofile-project.git'
            }
        }
       
       stage('BUILD'){
            steps {
                sh 'mvn install -DskipTests'
            }
            post {
                success {
                    echo 'Now Archiving artifacts...'
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }     

	    stage('UNIT TEST'){
            steps {
                sh 'mvn test'
            }
        }

        stage('Checkstyle Analysis'){
            steps{
                sh 'mvn checkstyle:checkstyle'
            }
        }

// to lint the code for quality via the sonarqube plugin tool installed to jenkins
        stage('CODE ANALYSIS with SONARQUBE') {
          
		  environment {
             scannerHome = tool 'sonar6.2'
          }

          steps {
            withSonarQubeEnv('sonarserver') {
               sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
            }
          }
        }
// also part of sonarqube above
        stage("Quality Gate"){
            steps{
                timeout(time:1,unit: 'HOURS'){
                    waitForQualityGate abortPipeline:true
                }
            }
        }

// to upload artifact via the nexus plugin tool installed to jenkins
        stage("Upload Artifact"){
            steps{
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: '172.31.2.240:8081',
                    groupId: 'QA',
                    version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                    repository: 'vprofile',
                    credentialsId: 'nexuslogin',
                    artifacts: [
                        [artifactId: 'vproapp',
                        classifier: '',
                        file: 'target/vprofile-v2.war',
                        type: 'war']
                    ]
                )
            }
        }
          
    }
// to notify via the slack plugin tool installed to jenkins
    post{
        always{
            echo 'Slack Notifications.'
            slackSend channel: '#devopscicd', color: COLOR_MAP[currentBuild.currentResult], message: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}"
        }
    }
}
